@using AutoMapper
@using RoadRunner.Components.Dialogs
@using RoadRunner.Models
@using Service.Contracts
@using Shared.DataTransferObjects
<FluentTab Label="Overview" Id="tab-1">
    <FluentStack>
        <FluentButton Class="tab-button" IconStart="@(new Icons.Regular.Size16.DocumentEdit())" Appearance="Appearance.Lightweight" OnClick="ShowRecipeEditorAsync">Recipe Editor</FluentButton>
        <FluentButton Class="tab-button" IconStart="@(new Icons.Regular.Size16.ArrowSwap())" Appearance="Appearance.Lightweight">Change Tonnage</FluentButton>
        <FluentButton Class="tab-button" IconStart="@(new Icons.Regular.Size16.ArrowUp())" Appearance="Appearance.Lightweight">Job Up</FluentButton>
        <FluentButton Class="tab-button" IconStart="@(new Icons.Regular.Size16.ArrowDown())" Appearance="Appearance.Lightweight">Job Down</FluentButton>
        <FluentButton Class="tab-button" IconStart="@(new Icons.Regular.Size16.Info())" Appearance="Appearance.Lightweight">Production Info</FluentButton>
    </FluentStack>
</FluentTab>

@code {
    [Inject]
    public IServiceManager Service { get; set; } = default!;

    [Inject]
    public IMapper mapper { get; set; } = default!;

    public RecipeForCreation DialogData { get; set; } = new();
    private RecipeModel _createdRecipe { get; set; } = new();

    [Inject]
    public IDialogService DialogService { get; set; } = default!;

    [Parameter]
    public EventCallback<RecipeModel> OnRecipeCreated { get; set; }

    private async Task ShowRecipeEditorAsync()
    {
        var dialog = await DialogService.ShowDialogAsync(DialogHelper.From<RecipeEditorDialog>(), DialogData, new DialogParameters()
        {
            Height = "600px",
            Width = "800px",
            Title = "Recipe Editor",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
            OnDialogResult = DialogService.CreateDialogCallback(this, HandleRecipeCreated)
        });        
    }

    private async Task HandleRecipeCreated(DialogResult result)
    {
        if (!result.Cancelled && result.Data != null)
        {
            DialogData = (RecipeForCreation)result.Data;

            var versionNumber = int.TryParse(DialogData.VersionNumber, out var v) ? v : 0;
            var batchSize = int.TryParse(DialogData.BatchSize, out var b) ? b : 3000;
            var mixTime = int.TryParse(DialogData.MixTime, out var m) ? m : 25;
            var mixTemperature = int.TryParse(DialogData.MixTemperature, out var mt) ? mt : 0;

            var recipeForCreation = new RecipeForCreationDto(DialogData.Name, DialogData.Title, versionNumber, DialogData.Valid,
            batchSize, DialogData.FixedBatchSize, mixTime, mixTemperature, DialogData.UpperTemperatureDeviation,
            DialogData.LowerTemperatureDeviation);

            var createdRecipe = await Service.RecipeService.CreateRecipeAsync(recipeForCreation);

            _createdRecipe = mapper.Map<RecipeModel>(createdRecipe);

            await OnRecipeCreated.InvokeAsync(_createdRecipe);
        }
    }
}
