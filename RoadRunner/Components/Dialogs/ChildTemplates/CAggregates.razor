@using AutoMapper
@using RoadRunner.Models
@using Service.Contracts
@using Shared.DataTransferObjects

<div style="height: 230px; overflow-y: scroll;">
    <FluentDataGrid Items="_aggregates" AutoFit="true">
        <PropertyColumn Property="@(a => a.MaterialNumber)" Title="Number" />
        <PropertyColumn Property="@(a => a.Name)" Title="Name" />
    </FluentDataGrid>
</div>

<EditForm Model="_editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <FluentStack>
        <div>
            <FluentTextField @bind-Value="AggregateForCreation.MaterialNumber"
                             Label="Number"
                             Required="true"
                             Placeholder="Enter aggregate number" />
        </div>
        <div>
            <FluentTextField @bind-Value="AggregateForCreation.Name"
                             Label="Name"
                             Required="true"
                             Placeholder="Enter aggregate name" />
        </div>
    </FluentStack>

    <FluentButton Type="ButtonType.Submit"
                  Appearance="Appearance.Accent">
        Create Aggregate
    </FluentButton>
</EditForm>


@code {
    [Parameter]
    public AggregateForCreation AggregateForCreation { get; set; } = default!;

    [Inject]
    public IServiceManager Service { get; set; } = default!;

    [Inject]
    public IMapper Mapper { get; set; } = default!;

    private IQueryable<AggregateModel>? _aggregates;

    private EditContext _editContext = default!;    

    protected override void OnInitialized()
    {
        _editContext = new EditContext(AggregateForCreation);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAggregatesAsync();
    }

    private async Task HandleValidSubmit()
    {
        var aggregate = Mapper.Map<AggregateForCreationDto>(AggregateForCreation);
        var created = await Service.AggregateService.CreateAggregateAsync(aggregate);

        await LoadAggregatesAsync();

        AggregateForCreation = new AggregateForCreation();

        _editContext = new EditContext(AggregateForCreation);
    }

    private async Task LoadAggregatesAsync()
    {
        var aggregates = await Service.AggregateService.GetAggregatesAsync(trackChanges: false);

        if (aggregates is not null)
        {
            var aggs = Mapper.Map<List<AggregateModel>>(aggregates);

            _aggregates = aggs.AsQueryable();
        }
    }
}
