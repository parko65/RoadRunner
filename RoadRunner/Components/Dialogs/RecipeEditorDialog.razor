@using Shared.DataTransferObjects
@using System.ComponentModel.DataAnnotations
@using static RoadRunner.Components.Dialogs.RecipeEditorDialog
@implements IDialogContentComponent<RecipeForCreation>

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>

    <EditForm EditContext="@_editContext" FormName="simple_register">
        <DataAnnotationsValidator />        

        <FluentTextField Name="register_name"
                         @bind-Value="@Content.Name"
                         Label="Name"
                         Required />
        <FluentTextField Name="register_age"
                           @bind-Value="@Content.Title"
                           Label="Age"
                           Required />

        <div style="color: var(--error);">
            <FluentValidationSummary />
        </div>
    </EditForm>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!_editContext.Validate())"
                  OnClick="@SaveAsync">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

@code {
    private EditContext _editContext = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public RecipeForCreation Content { get; set; } = default!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    public class RecipeForCreation
    {
        [Required(ErrorMessage = "Recipe name is a required field.")]
        [MaxLength(20, ErrorMessage = "Name must be less than 20 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Recipe title is a required field.")]
        [MaxLength(30, ErrorMessage = "Name must be less than 20 characters")]
        public string Title { get; set; } = string.Empty;

        public int VersionNumber { get; set; }
        public bool Valid { get; set; }
        public int BatchSize { get; set; }
        public bool FixedBatchSize { get; set; }
        public int MixTime { get; set; }
        public int MixTemperature { get; set; }
        public int UpperTemperatureDeviation { get; set; }
        public int LowerTemperatureDeviation { get; set; }
    }
}