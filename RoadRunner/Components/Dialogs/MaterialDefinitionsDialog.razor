@using RoadRunner.Components.Dialogs.ChildTemplates
@using RoadRunner.Models
@using static RoadRunner.Components.Tabs.ConfigurationTabs
@implements IDialogContentComponent<Material>

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    
        <FluentGrid Justify="JustifyContent.Center">
            <FluentGridItem xs="2">
                <FluentButton Class="dialog-tab-button"
                              IconStart="@(new Icons.Regular.Size16.DocumentEdit())"
                              Appearance="Appearance.Outline"
                              OnClick="ShowAggregates">
                    Agg.<br />
                    Hot Bins
                </FluentButton>
            </FluentGridItem>
            <FluentGridItem xs="2">
                <FluentButton Class="dialog-tab-button"
                              IconStart="@(new Icons.Regular.Size16.DocumentEdit())"
                              Appearance="Appearance.Outline"
                              OnClick="ShowBitumen">
                    Bitumen
                </FluentButton>
            </FluentGridItem>
            <FluentGridItem xs="2">
                <FluentButton Class="dialog-tab-button"
                              IconStart="@(new Icons.Regular.Size16.DocumentEdit())"
                              Appearance="Appearance.Outline"
                              OnClick="ShowFiller">
                    Filler
                </FluentButton>
            </FluentGridItem>
            <FluentGridItem xs="2">
                <FluentButton Class="dialog-tab-button"
                              IconStart="@(new Icons.Regular.Size16.DocumentEdit())"
                              Appearance="Appearance.Outline" Disabled="true"
                              OnClick="ShowReturnDust">
                    Return Dust
                </FluentButton>
            </FluentGridItem>
            <FluentGridItem xs="2">
                <FluentButton Class="dialog-tab-button"
                              IconStart="@(new Icons.Regular.Size16.DocumentEdit())"
                              Appearance="Appearance.Outline"
                              OnClick="ShowColdFeed">
                    Coldfeed
                </FluentButton>
            </FluentGridItem>
            <FluentGridItem xs="2">
                <FluentButton Class="dialog-tab-button"
                              IconStart="@(new Icons.Regular.Size16.DocumentEdit())"
                              Appearance="Appearance.Outline"
                              OnClick="ShowAdditives">
                    Additives
                </FluentButton>
            </FluentGridItem>
            <FluentGridItem xs="2">
                <FluentButton Class="dialog-tab-button"
                              IconStart="@(new Icons.Regular.Size16.DocumentEdit())"
                              Appearance="Appearance.Outline"
                              OnClick="ShowFixedAdditives">
                    Fixed<br />
                    Additives
                </FluentButton>
            </FluentGridItem>
            <FluentGridItem xs="2">
                <FluentButton Class="dialog-tab-button"
                              IconStart="@(new Icons.Regular.Size16.DocumentEdit())"
                              Appearance="Appearance.Outline" Disabled="true"
                              OnClick="ShowReclaim">
                    Reclaim
                </FluentButton>
            </FluentGridItem>
            <FluentGridItem xs="2">
                <FluentButton Class="dialog-tab-button"
                              IconStart="@(new Icons.Regular.Size16.DocumentEdit())"
                              Appearance="Appearance.Outline"
                              OnClick="ShowSmallDose">
                    Small Dose
                </FluentButton>
            </FluentGridItem>
        </FluentGrid>

    <MaterialsDialogContainer Content="currentContent" />

</FluentDialogBody>


<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  OnClick="@SaveAsync">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

@code {
    private RenderFragment? currentContent;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public Material Content { get; set; } = default!;

    protected override void OnInitialized()
    {
        ShowAggregates();
    }

    private async Task SaveAsync()
    {
        await Dialog.CloseAsync(Content);
    }

    private RenderFragment CreateComponent<T>(Dictionary<string, object>? parameters = null) where T : ComponentBase
    {
        return builder =>
        {
            builder.OpenComponent<T>(0);
            if (parameters != null)
            {
                var sequence = 1;
                foreach (var param in parameters)
                {
                    builder.AddAttribute(sequence++, param.Key, param.Value);
                }
            }
            builder.CloseComponent();
        };
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private void ShowAggregates() => currentContent = CreateComponent<CAggregates>(new() { ["AggregateForCreation"] = Content!.AggregateForCreation! });
    private void ShowBitumen() => currentContent = CreateComponent<CBitumens>(new() { ["BitumenForCreation"] = Content!.BitumenForCreation! });
    private void ShowFiller() => currentContent = CreateComponent<FillersDataGrid>(new() { ["Title"] = "Under Construction" });
    private void ShowReturnDust() => currentContent = CreateComponent<ReturnDustDataGrid>();
    private void ShowColdFeed() => currentContent = CreateComponent<ColdfeedDataGrid>();
    private void ShowAdditives() => currentContent = CreateComponent<CAdditives>();
    private void ShowFixedAdditives() => currentContent = CreateComponent<FixedAdditivesDataGrid>();
    private void ShowReclaim() => currentContent = CreateComponent<ReclaimDataGrid>();
    private void ShowSmallDose() => currentContent = CreateComponent<SmallDoseDataGrid>();
}